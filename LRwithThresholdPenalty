# -*- coding: utf-8 -*-
"""
Created on Fri Oct  7 19:38:53 2016

@author: ZhengWang
"""

import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table
from sklearn.preprocessing import normalize

x_train = np.loadtxt('X.dat')
y_train = np.loadtxt('Y.dat')
x_test = np.loadtxt('Xtest.dat')
y_test = np.loadtxt('Ytest.dat')
x_train = normalize(np.c_[np.ones(x_train.shape[0]), x_train], axis=0)
x_test = normalize(np.c_[np.ones(x_test.shape[0]), x_test], axis=0)
betas = np.zeros(x_train.shape[1])

def logistic_func(theta, X):
    return float(1) / (1 + np.exp(- X.dot(theta)))
def new_beta(theta, X, Y, lmbda):
    a = theta + X.T.dot(Y) - X.T.dot(logistic_func(theta, X))
    for i in range(a.shape[0]):
        if abs(a[i]) > lmbda:
            theta[i] = a[i]
        else:
            theta[i] = 0
    return theta
def pred_values(theta, X, hard=True):
    pred_prob = logistic_func(theta, X)
    pred_value = np.where(pred_prob >= .5, 1, 0)
    if hard:
        return pred_value
    return pred_prob
def iteration(theta, X, Y, lmbda = 0.1):
    trainerror = []
    predicted_y_train = pred_values(theta, X)
    trainerror.append([0, sum(predicted_y_train != Y) / len(Y)])
    for i in range(1, 11):
        theta = new_beta(theta, X, Y, lmbda)
        predicted_y_train = pred_values(theta, X)
        trainerror.append([i, sum(predicted_y_train != Y) / len(Y)])
    return theta, np.array(trainerror)

betas, trainerror = iteration(betas, x_train, y_train, 0.2)
plt.plot(trainerror[:,0], trainerror[:,1], label  = 'lambda = 0.2')
plt.xlabel('iterations')
plt.ylabel('trainerrors')
plt.legend(loc=0)
plt.show()
trainerrors = []
testerrors = []
trainerrors.append(trainerror[10,1])
predicted_y_test = pred_values(betas, x_test)
testerrors.append(sum(predicted_y_test != y_test) / len(y_test))
print(Table([trainerrors, testerrors], names=('Train Error', 'Test Error')))
